@import '~bootstrap/scss/variables';

$range-primary-color: $blue;
$range-highlight-filter: contrast(calc(1 - 0.25 * var(--hl))) saturate(calc(1 + 2 * var(--hl)));
$range-transition-timing: 0.3s;
$range-knob-scale: 0.5;
$range-x-padding: 2em;
$range-bar-height: 6px;

@mixin track() {
  height: 100%;
  width: 100%;
  background: none;
}
@mixin knob() {
  box-sizing: border-box;
  width: var(--d);
  height: var(--d);
  border: solid calc(0.5 * var(--r)) transparent;
  border-radius: 50%;
  background: $range-primary-color;
  transform: translateY(50%);
  filter: $range-highlight-filter;
  transition: filter $range-transition-timing ease-out;
  pointer-events: auto;
}

@mixin range($breakpoint: '') {
  @if $breakpoint == null {
    .multi-range,
    .multi-range * {
      --hl: 0;
      --nhl: calc(1 - var(--hl));
      margin: 0;
      font: inherit;
    }
    .multi-range-container {
      @each $dir in right, left {
        margin-#{$dir}: -0.5 * $range-x-padding;
      }
    }
    .multi-range {
      --w: 100%;
      --h: 1.75em;
      --d: calc(#{$range-knob-scale} * var(--h));
      --r: calc(0.5 * var(--d));
      --uw: calc(var(--w) - var(--d));
      --dif: calc(var(--max) - var(--min));
      display: grid;
      grid-template: max-content var(--h) max-content / 0 var(--w) 0;
      position: relative;
      overflow: hidden;
      width: calc(var(--w) + #{$range-x-padding});
      padding: 0 $range-x-padding * 0.5;
      transition: filter $range-transition-timing ease-out;
      &::before, &::after {
        grid-column: 2;
        grid-row: 2;
        align-self: center;
        height: $range-bar-height;
        border-radius: var(--r);
        background: $secondary;
        content: '';
      }
      &::after {
        background: $primary;
        filter: $range-highlight-filter;
        -webkit-mask: var(--fill);
        -webkit-mask-composite: xor;
        mask: var(--fill);
        mask-composite: exclude;
      }
      &:focus-within { --hl: 1; }
    }
    .sr-only {
      position: absolute;
      clip-path: inset(50%);
    }
    .multi-range > #multi-lbl {
      grid-column: 2;
      grid-row: 1;
    }
    .multi-range > input[type='range'] {
      &::-webkit-slider-runnable-track,
      &::-webkit-slider-thumb,
      & { -webkit-appearance: none; }
      grid-column: 2;
      grid-row: 2;
      z-index: calc(1 + var(--hl));
      top: 0;
      left: 0;
      width: var(--w) - $range-x-padding;
      background: none;
      transition: filter $range-transition-timing ease-out;
      cursor: grab;
      pointer-events: none;
      &::-webkit-slider-runnable-track { @include track(); }
      &::-moz-range-track { @include track(); }
      &::-webkit-slider-thumb { @include knob(); }
      &::-moz-range-thumb { @include knob(); }
      &:focus {
        outline: solid 0 transparent;
        &, & + output { --hl: 1 };
      }
      &:active { cursor: grabbing; }
    }
    .multi-range > output {
      grid-column: 2;
      grid-row: 3;
      margin-left: var(--r);
      width: 100%;
      // transform: translate(calc((var(--c) - var(--min)) / var(--dif) * var(--uw)));
      transform: translate(calc((var(--c) - var(--min)) / var(--dif) * var(--uw)));
      &::after {
        max-width: max-content;
        display: block;
        border-radius: 5px;
        margin-top: 2px;
        padding: 0 0.375em;
        background: $light;
        color: $dark;
        transform: translateX(-50%) scale(var(--hl));
        transition: transform $range-transition-timing ease-out;
        counter-reset: c var(--c);
        content: counter(c);
      }
    }
  }
}
